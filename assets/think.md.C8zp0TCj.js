import{_ as i,c as a,o as n,ae as e}from"./chunks/framework.CntOjCQm.js";const E=JSON.parse('{"title":"思考","description":"","frontmatter":{},"headers":[],"relativePath":"think.md","filePath":"think.md"}'),l={name:"think.md"};function p(t,s,h,k,r,d){return n(),a("div",null,s[0]||(s[0]=[e(`<h1 id="思考" tabindex="-1">思考 <a class="header-anchor" href="#思考" aria-label="Permalink to &quot;思考&quot;">​</a></h1><h2 id="活动栏" tabindex="-1">活动栏 <a class="header-anchor" href="#活动栏" aria-label="Permalink to &quot;活动栏&quot;">​</a></h2><p>🔲目录：浏览打开的目录内所有<code>*.lua</code>文件</p><p>✅编辑器：提供<code>lua</code>脚本编辑框，实现语法高亮、代码提示、🔲语法检测；提供新建和保存按钮；(?:考虑保存时运行脚本还是多一个运行按钮；是否要实现调试功能)</p><p>✅终端：显示脚本运行历史结果，以及单行输入脚本测试的功能</p><p>🔲代码管理：使用git查看当前打开目录仓库的修改</p><p>🔲设置：外观主题，更新检测</p><p>✅帮助：版本信息，第三方依赖，版权信息及脚本参考文档</p><h2 id="脚本内容" tabindex="-1">脚本内容 <a class="header-anchor" href="#脚本内容" aria-label="Permalink to &quot;脚本内容&quot;">​</a></h2><p>?:思考模型是否要有名称</p><p>模型的通用方法：</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">x</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(value) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 设置x绝对位置value(number)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">y</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(value) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 设置y绝对位置value(number)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">z</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(value) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 设置z绝对位置value(number)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">rx</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(deg) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 设置绕x轴旋转绝对角度deg(number)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ry</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(deg) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 设置绕y轴旋转绝对角度deg(number)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">rz</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(deg) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 设置绕z轴旋转绝对角度deg(number)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">pos</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x,y,z) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 设置绝对位置x(number),y(number),z(number)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">rot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(rx,ry,rz) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 设置旋转绝对角度rx(number),ry(number),rz(number)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">fuse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(shape) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- Union（并集）合并shape [BRepAlgoAPI_Fuse]</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cut</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(shape) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- Subtraction（差集）删除与shape相交部分 [BRepAlgoAPI_Cut]</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">common</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(shape) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- Intersection（交集）只保留与shape相交部分 [BRepAlgoAPI_Common]</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">prism</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x,y,z) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 拉伸 输入x(number),y(number),z(number)表示各方向拉伸距离 [BRepPrimAPI_MakePrism]</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">fillet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(radius,table) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 倒圆 输入radius(number),conditions [BRepFilletAPI_MakeFillet]</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- conditions: table - {type[string](line/circle/ellipse/hyperbola/parabola/bezier_curve), dir[string](x/y/z), min/max[table]({x,y,z})}</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">chamfer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(distance,table) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 倒角 输入distance(number),conditions [BRepFilletAPI_MakeChamfer]</span></span></code></pre></div><p>全局方法：</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">show</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(shape) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 显示一个形状</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">show</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(list_shape)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 显示多个形状</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">export_stl</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(filename) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 导出stl文件到filename(string)文件</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">export_stl</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(filename,option) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- option(table): {type[string](ascii/binary), radian[number](The smaller the curvature, the more triangles there are)}</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">export_step</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(filename) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 导出step文件到filename(string)文件</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">export_iges</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(filename) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 导出iges文件到filename(string)文件</span></span></code></pre></div>`,14)]))}const o=i(l,[["render",p]]);export{E as __pageData,o as default};
