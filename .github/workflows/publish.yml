name: Build and Release

on:
  # 当推送标签时触发
  push:
    tags:
      - 'v*'
  # 也可以手动触发
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag'
        required: true
        default: 'v1.0.0'

jobs:
  build:
    strategy:
      matrix:
        os: [ windows-latest, ubuntu-latest, macos-latest ]
    runs-on: ${{ matrix.os }}

    steps:
      # 检出代码
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          # 获取完整的git历史，包括所有标签
          fetch-depth: 0


      - name: Install NSIS
        if: ${{ matrix.os=='windows-latest' }}
        shell: pwsh
        run: choco install nsis -y
          
      - name: Add NSIS to PATH
        if: ${{ matrix.os=='windows-latest' }}
        shell: pwsh
        run: |
          $nsisPath = "C:\Program Files (x86)\NSIS"
          Add-Content -Path $env:GITHUB_PATH -Value $nsisPath
          Write-Host "Added NSIS to PATH: $nsisPath"

      - name: Verify NSIS installation
        if: ${{ matrix.os=='windows-latest' }}
        shell: pwsh
        run: |
          Write-Host "Checking NSIS..."
          makensis /VERSION

      - name: 获取版本号
        shell: bash
        id: get_version
        run: |
          VERSION=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"

      - name: 安装依赖(ubuntu)
        if: ${{ matrix.os=='ubuntu-latest' }}
        run: |
          sudo apt-get update
          sudo apt-get install -y libltdl-dev libxcb*
          sudo apt-get install -y libx11* libgl1-mesa-dev libxrender-dev libxi-dev libxkbcommon-dev libxkbcommon-x11-dev
          sudo apt-get install -y libxtst-dev pkg-config autoconf libtool bison libglu1-mesa-dev freeglut3-dev
          sudo apt-get install -y libfontconfig1-dev
          sudo apt-get install -y libgles2-mesa-dev libdrm-dev libgbm-dev libsm-dev libcups2-dev libmtdev-dev libts-dev

      - name: 缓存vcpkg仓库(ubuntu)
        if: ${{ matrix.os=='ubuntu-latest' }}
        id: cache_vcpkg_ubuntu
        uses: actions/cache@v4
        with:
          path: ${{github.workspace}}/vcpkg
          key: cache_vcpkg_ubuntu

      - name: 缓存vcpkg仓库(windows)
        if: ${{ matrix.os=='windows-latest' }}
        id: cache_vcpkg_windows
        uses: actions/cache@v4
        with:
          path: ${{github.workspace}}/vcpkg
          key: cache_vcpkg_windows

      - name: 缓存vcpkg仓库(macos)
        if: ${{ matrix.os=='macos-latest' }}
        id: cache_vcpkg_macos
        uses: actions/cache@v4
        with:
          path: ${{github.workspace}}/vcpkg
          key: cache_vcpkg_macos

      - name: Configure CMake
        run: cmake -B ${{github.workspace}}/build -DTAG_VERSION="${{ steps.get_version.outputs.version }}" -DCMAKE_BUILD_TYPE=Release -DCMAKE_TOOLCHAIN_FILE=${{github.workspace}}/vcpkg/scripts/buildsystems/vcpkg.cmake

      - name: Build
        run: cmake --build ${{github.workspace}}/build --config Release

      - name: 创建安装包(ubuntu)
        if: ${{ matrix.os=='ubuntu-latest' }}
        run: |
          cd ${{github.workspace}}/build
          cpack

      - name: 上传构建产物(ubuntu)
        if: ${{ matrix.os=='ubuntu-latest' }}
        uses: actions/upload-artifact@v4
        with:
          name: app-ubuntu-x64
          path: build/JellyCAD_Setup_${{ steps.get_version.outputs.version }}.sh
          retention-days: 1

      - name: 创建安装包(windows)
        if: ${{ matrix.os=='windows-latest' }}
        shell: pwsh
        run: |
          cp ${{github.workspace}}/resource/installer.nsi ${{github.workspace}}/build
          makensis /DPRODUCT_VERSION="${{ steps.get_version.outputs.version }}" ${{github.workspace}}/build/installer.nsi

      - name: 上传构建产物(windows)
        if: ${{ matrix.os=='windows-latest' }}
        uses: actions/upload-artifact@v4
        with:
          name: app-windows-x64
          path: build/JellyCAD_Setup_${{ steps.get_version.outputs.version }}.exe
          retention-days: 1

      - name: 创建安装包(macos)
        if: ${{ matrix.os=='macos-latest' }}
        run: |
          cd ${{github.workspace}}/build
          cpack
      - name: 上传构建产物(macos)
        if: ${{ matrix.os=='macos-latest' }}
        uses: actions/upload-artifact@v4
        with:
          name: app-macos-x64
          path: build/JellyCAD_Setup_${{ steps.get_version.outputs.version }}.dmg
          retention-days: 1
  release:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 获取完整的git历史

      - name: Get version from git tag
        id: get_version
        run: |
          if [ "${{ github.event_name }}" = "push" ]; then
            VERSION=${GITHUB_REF#refs/tags/}
          else
            VERSION=$(git describe --tags --abbrev=0 2>/dev/null || echo "v1.0.0")
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"
          
          VERSION_NUMBER=${VERSION#v}
          echo "version_number=$VERSION_NUMBER" >> $GITHUB_OUTPUT
          echo "Version Number: $VERSION_NUMBER"

      - name: Generate changelog
        id: changelog
        run: |
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
          
          if [ -z "$PREV_TAG" ]; then
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" --no-merges)
          else
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" --no-merges ${PREV_TAG}..HEAD)
          fi
          
          EOF=$(dd if=/dev/urandom bs=15 count=1 status=none | base64)
          echo "changelog<<$EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "$EOF" >> $GITHUB_OUTPUT

      - name: 下载所有构建产物
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          merge-multiple: true

      - name: 创建Release并上传文件
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.get_version.outputs.version }}
          name: Release ${{ steps.get_version.outputs.version }}
          body: |
            ## 🚀 Release ${{ steps.get_version.outputs.version_number }}
            
            ### 📋 Changes
            ${{ steps.changelog.outputs.changelog }}
            
            ---
            **Full Changelog**: https://github.com/${{ github.repository }}/compare/${{ steps.get_version.outputs.version }}...HEAD
          draft: false
          prerelease: false
          files: |
            artifacts/*
          generate_release_notes: true
          make_latest: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
